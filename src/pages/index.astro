---
import { PrismaClient, type Message } from '@prisma/client'
import { getDatabaseUrl } from '../utils/env';

const dbUrl = getDatabaseUrl();
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: dbUrl
    }
  }
})
let messages: Message[] = []

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData()
    const message = formData.get('message')?.toString() || ''
    await prisma.message.create({
      data: { content: message }
    })
  } catch (error) {
    console.error('Error saving message:', error)
  }
}

messages = await prisma.message.findMany({
  orderBy: { createdAt: 'desc' }
})
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Astro Docker Demo</title>
    <style>
      :root {
        --primary: #4361ee;
        --primary-hover: #3a56d4;
        --background: #f9fafb;
        --card-bg: #ffffff;
        --text: #333333;
        --text-light: #666666;
        --border: #e5e7eb;
      }
      
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
      
      body {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        background-color: var(--background);
        color: var(--text);
        line-height: 1.6;
        padding: 0;
        margin: 0;
        min-height: 100vh;
      }
      
      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem 1rem;
      }
      
      header {
        background-color: var(--primary);
        color: white;
        padding: 2rem 0;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      
      h1 {
        font-size: 2rem;
        margin: 0;
        font-weight: 700;
      }
      
      h2 {
        font-size: 1.5rem;
        margin: 1.5rem 0 1rem;
        color: var(--primary);
        border-bottom: 2px solid var(--primary);
        padding-bottom: 0.5rem;
      }
      
      .form-container {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
      }
      
      form {
        display: flex;
        gap: 0.75rem;
        width: 100%;
      }
      
      input[type="text"] {
        flex: 1;
        padding: 0.75rem 1rem;
        border: 1px solid var(--border);
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.2s;
      }
      
      input[type="text"]:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.3);
      }
      
      button {
        padding: 0.75rem 1.5rem;
        background: var(--primary);
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s, transform 0.1s;
      }
      
      button:hover {
        background: var(--primary-hover);
      }
      
      button:active {
        transform: translateY(1px);
      }
      
      .messages-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      
      .message {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 1.25rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
      }
      
      .message:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }
      
      .message p {
        margin: 0 0 0.75rem 0;
        font-size: 1.125rem;
      }
      
      .message small {
        color: var(--text-light);
        display: block;
        text-align: right;
        font-size: 0.875rem;
      }
      
      .empty-message {
        text-align: center;
        padding: 2rem;
        background-color: var(--card-bg);
        border-radius: 8px;
        color: var(--text-light);
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Astro + Docker + PostgreSQL ðŸš€</h1>
    </header>
    
    <div class="container">
      <div class="form-container">
        <form method="POST">
          <input type="text" name="message" placeholder="Enter a message" required />
          <button type="submit">Send</button>
        </form>
      </div>

      <h2>Messages</h2>
      <div class="messages-container">
        {messages.length > 0 ? (
          messages.map(msg => (
            <div class="message">
              <p>{msg.content}</p>
              <small>{new Date(msg.createdAt).toLocaleString()}</small>
            </div>
          ))
        ) : (
          <div class="empty-message">
            No messages yet. Be the first to write something!
          </div>
        )}
      </div>
    </div>
  </body>
</html> 